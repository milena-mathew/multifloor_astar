#!/usr/bin/python

import roslib
roslib.load_manifest('multi_map_navigation')
import rospy
import actionlib
import sys, os
from map_store.msg import *
from map_store.srv import *
from nav_msgs.msg import *
from nav_msgs.srv import *
from geometry_msgs.msg import *
from visualization_msgs.msg import *
import yaml
from multi_map_navigation.msg import *
from multi_map_navigation.srv import *
from move_base_msgs.msg import *
from actionlib_msgs.msg import GoalStatus
from nav_msgs.msg import OccupancyGrid as OccGrid
from std_msgs.msg import Float32MultiArray,Float32,Int16
import math
import tf
import random
import time

def calc_distance(l1, l2):
    dx = l1[0] - l2[0]
    dy = l1[1] - l2[1]
    return math.sqrt(dx * dx + dy * dy)

class MultiMapNavigationDataManager(object):
    def __init__(self):
        self.ready = False
        self.listener = tf.TransformListener(True, rospy.Duration(100))
        rospy.loginfo("Wait for map 1")
        #self.start_map_sub = rospy.Subscriber('map1', OccGrid, self.set_start_map)
        map1_data = rospy.wait_for_message('/map1', OccGrid)
        rospy.loginfo("Wait for map 2")
        #self.goal_map_sub = rospy.Subscriber('map2', OccGrid, self.set_goal_map)
        map2_data = rospy.wait_for_message('/map2', OccGrid)
        self.set_start_map(map1_data)
        self.set_goal_map(map2_data)
        self.visualization_publisher = rospy.Publisher('visualization_marker', Marker)
        #rospy.spin()

        transitions = ["door_blast", "elevator_blast", "door_drag"]
        if rospy.has_param('~transition_types'):
            transitions = rospy.get_param("~transition_types").split(" ")

        self.transition_action_clients = {"normal": None}
        for client in transitions:
            if (client.strip() == ""):
                continue
            rospy.loginfo("Waiting for " + client)
            cli = actionlib.SimpleActionClient(client, MultiMapNavigationTransitionAction)
            cli.wait_for_server()
            self.transition_action_clients[client] = cli
        
        self.n_markers = 0

        rospy.loginfo("loading map")

        if rospy.has_param('~definition_file'):
            if (not self.loadyaml(rospy.get_param("~definition_file"))):
                return
        else:
            rospy.logerr("You must specify a definition_file")
            return
        
        self.map_publisher = rospy.Publisher("map", OccGrid, latch=True)
        self.select_map(self.start_map)

        rospy.loginfo("Waiting for position")
        self.get_robot_position()
       
        self.ready = True

        self.secondary_map_publisher = rospy.Publisher("secondary_map", OccGrid, latch=True)
        self.set_map_service = rospy.Service('~set_map', SetMap, self.set_map)
        self.set_secondary_map_service = rospy.Service('~set_secondary_map', SetMap, self.set_secondary_map)
        rospy.loginfo("Starting")

    def set_start_map(self, map):
        self.start_map_data = map

    def set_goal_map(self, map):
        self.goal_map_data = map

    def get_robot_position(self):
        while not rospy.is_shutdown():
            try:
                self.listener.waitForTransform("/map", "/base_link", rospy.Time(), rospy.Duration(100))
                (trans,rot) = self.listener.lookupTransform('/map', '/base_link', rospy.Time())
                print([trans, rot])
                return [trans[0], trans[1]]
            except (tf.LookupException, tf.ConnectivityException, tf.ExtrapolationException) as ex:
                print(ex)
                rospy.logwarn("Failed to get robot transform")
                rospy.sleep(0.1)
        return None

    def get_robot_rotation(self):
        while not rospy.is_shutdown():
            try:
                self.listener.waitForTransform("/map", "/base_link", rospy.Time(), rospy.Duration(100))
                (trans,rot) = self.listener.lookupTransform('/map', '/base_link', rospy.Time())
                return rot
            except (tf.LookupException, tf.ConnectivityException, tf.ExtrapolationException) as ex:
                rospy.logwarn("Failed to get robot transform")
                rospy.sleep(0.1)
        return None

    def set_map(self, msg):
        rospy.loginfo("Setting map to " + msg.name)
        self.select_map(msg.name)
        return SetMapResponse()

    def set_secondary_map(self, msg):
        rospy.loginfo("Setting secondary map to " + msg.name)
        self.secondary_map_data = self.goal_map_data
        self.secondary_map_data.info.origin.position.z = -1.0
        self.secondary_map_data.info.origin.position.x = 0.0
        self.secondary_map_data.info.origin.position.y = 0.0

        if (self.current_map in self.map_north):
            yaw = self.map_north[msg.name] - self.map_north[self.current_map]
        else:
            yaw = 0
        quat = tf.transformations.quaternion_from_euler(0, 0, -yaw)
        self.secondary_map_data.info.origin.orientation.x = quat[0]
        self.secondary_map_data.info.origin.orientation.y = quat[1]
        self.secondary_map_data.info.origin.orientation.z = quat[2]
        self.secondary_map_data.info.origin.orientation.w = quat[3]

        for i in self.wormholes:
            pos = {}
            for loc in i["locations"]:
                pos[loc["map"]] = loc["position"]
            if (msg.name in pos and self.current_map in pos):
                angle = math.atan2(pos[msg.name][1], pos[msg.name][0])
                distance = pos[msg.name][1] * pos[msg.name][1] + pos[msg.name][0] * pos[msg.name][0]
                distance = math.sqrt(distance)
                
                delta_x = pos[self.current_map][0] + distance * math.cos(angle + yaw)
                delta_y = pos[self.current_map][1] + distance * math.sin(angle + yaw)
                self.secondary_map_data.info.origin.position.x = delta_x
                self.secondary_map_data.info.origin.position.y = delta_y
                break
            self.secondary_map_publisher.publish(self.secondary_map_data)
        return SetMapResponse()

    def select_map(self, name):
        print(name)
        if name == "start_map" :
            self.current_map = name
            self.current_map_data = self.start_map_data
        else:
            self.current_map = name
            self.current_map_data = self.goal_map_data
        self.map_publisher.publish(self.current_map_data)
        self.publish_markers()

    def secondary_map(self, msg):
        response = GetMapResponse()
        response.map = self.secondary_map_data
        return response
    
    def dynamic_map(self, msg):
        response = GetMapResponse()
        response.map = self.current_map_data
        return response
        
    def publish_markers(self):
        n_markers = 0
        for i in self.wormholes:
            loc = False
            for location in i["locations"]:
                if (location["map"] == self.current_map):
                    loc = location["position"]
            if (loc):
                marker = Marker()
                marker.header.frame_id = "/map"
                marker.header.stamp = rospy.get_rostime()
                marker.ns = "multimna"
                marker.type = Marker.CYLINDER
                marker.action = Marker.MODIFY
                marker.id = n_markers
                marker.pose.position.x = loc[0]
                marker.pose.position.y = loc[1]
                marker.pose.position.z = 0.5
                marker.pose.orientation.x = 0.0
                marker.pose.orientation.y = 0.0
                marker.pose.orientation.z = 0.0
                marker.pose.orientation.w = 1.0
                if "radius" in i:
                    marker.scale.x = i["radius"] * 2.0
                    marker.scale.y = i["radius"] * 2.0
                else:
                    marker.scale.x = 0.5
                    marker.scale.y = 0.5
                marker.scale.z = 1
                marker.color.a = 1.0
                marker.color.r = 0.0
                marker.color.g = 0.0
                marker.color.b = 1.0
                
                n_markers = n_markers + 1
                self.visualization_publisher.publish(marker)

        if (self.n_markers > n_markers):
            for i in range(n_markers, self.n_markers):
                marker = Marker()
                marker.action = Marker.DELETE
                marker.id = self.n_markers
                self.visualization_publisher.publish(marker)
        self.n_markers = n_markers
    
    def loadyaml(self, filename):
        try:
            f = open(filename, 'r') 
            text = f.read()
            data = yaml.load(text)

        except Exception as e:
            rospy.logerr("Error attempting to load YAML: " + filename)
            print(e)
            return False
        if (not "maps" in data):
            rospy.logerr("YAML file: " + filename + " contains no maps")
            return False
        if (not "wormholes" in data):
            rospy.logerr("YAML file: " + filename + " contains no wormholes")
            return False
        if (not "start_map" in data):
            rospy.logerr("YAML file: " + filename + " contains no start_map")
            return False
        
        self.maps = {}
        self.map_north = {}
        for i in data["maps"]:
            self.map_north[i["name"]] = float(i["north_angle"])
 #           self.maps[i["name"]] = self.start_map
        
        self.wormholes = data["wormholes"]
        n = 0
        wh_names = []
        for i in self.wormholes:
            if (not "name" in i):
                rospy.logerr("YAML file: " + filename + " contains an invalid wormhole which is missing a name")
                return False
            if (i["name"] in wh_names):
                rospy.logerr("Duplicate wormholes: " + i["name"])
                return False
            wh_names.append(i["name"])
            if (not "locations" in i):
                rospy.logerr("YAML file: " + filename + " contains an invalid wormhole which is missing locations")
                return False
            if (not "type" in i):
                rospy.logerr("YAML file: " + filename + " contains an invalid wormhole which is missing type")
                return False
            if (not i["type"] in self.transition_action_clients):
                rospy.logerr("YAML file: " + filename + " contains an invalid wormhole of type " + i["type"]
                             + " valid types are: " + str(self.transition_action_clients.keys()))
                return False
            for loc in i["locations"]:
                if (not "map" in loc):
                    rospy.logerr("YAML file: " + filename + " contains an invalid location which is missing a map")
                    return False
                if (not "position" in loc):
                    rospy.logerr("YAML file: " + filename + " contains an invalid location which is missing a position")
                    return False
                
        self.start_map = "start_map"

        return True

class MultiMapNavigationNavigator():
    def __init__(self, manager):
        self.manager = manager
        # astar_sub = rospy.Subscriber('global_path',Float32MultiArray,self.astar_path)
        print("got here")
        move_base_name = "move_base"
        if rospy.has_param('~move_base_action'):
            move_base_name = rospy.get_param("~move_base_action")
        print(move_base_name)
        self.move_base = actionlib.SimpleActionClient(move_base_name, MoveBaseAction)
        self.move_base.wait_for_server()
        self.action_server = actionlib.SimpleActionServer("multi_map_navigation/move", MultiMapNavigationAction,
                                                          execute_cb=self.execute_cb, auto_start=False)
        self.pose_pub = rospy.Publisher("initialpose", PoseWithCovarianceStamped, queue_size=1)
        print("not ready")
        while not self.manager.ready:
            rospy.sleep(1.0)
        print("ready")
        self.action_server.start()

    def execute_cb(self, goal):
        #Create a graph of all the wormholes. The nodes are the locations.
        graph = {'start': {}, 'end': {}}

        print("executed something")
        for w in self.manager.wormholes:
            #The cost of moving through a wormhole is nothing. In the future, this
            #could be non-zero if there is an object such as a door or elevator that
            #could slow the robot's motion.
            for l in range(0, len(w["locations"])):
                direction = "double"
                if ("direction" in w["locations"][l]):
                    direction = w["locations"][l]["direction"]
                traverse = {}
                if (direction == "double" or direction == "entrance"):
                    for j in range(0, len(w["locations"])):
                        direction = "double"
                        if ("direction" in w["locations"][j]):
                            direction = w["locations"][j]["direction"]
                        if (direction == "exit" or direction == "double"):
                            traverse[str(j) + "_" + w["name"]] = 100.0
                graph[str(l) + "_" + w["name"]] = traverse
        print("wormhole")
        robot_pos = self.manager.get_robot_position()
        
        #Create the graph for each of the wormholes
        for w in self.manager.wormholes:
            for l in range(0, len(w["locations"])):
                #loop through the locations of the wormhole and add links
                #to the start and end as well as other locations
                ll = w["locations"][l]
                for m in self.manager.wormholes:
                    for j in range(0, len(m["locations"])):
                        jl = m["locations"][j]
                        if (ll["map"] == jl["map"]):
                            #We only need to do this one-way because the other side
                            #is done automatically in other iterations of the loop.
                            #For now we use eucleadian distance. This works but it
                            #would be better if we used actual planner results.
                            graph[str(l) + "_" + w["name"]][str(j) + "_" + m["name"]] \
                                = calc_distance(ll["position"], jl["position"])

                if (ll["map"] == goal.goal_map):
                    dist = calc_distance([goal.target_pose.pose.position.x, 
                                          goal.target_pose.pose.position.y], ll["position"])
                    graph[str(l) + "_" + w["name"]]["end"] = dist
                    graph["end"][str(l) + "_" + w["name"]] = dist
                if (ll["map"] == self.manager.current_map):
                    dist = calc_distance(robot_pos, ll["position"])
                    graph[str(l) + "_" + w["name"]]["start"] = dist
                    graph["start"][str(l) + "_" + w["name"]] = dist

        if (goal.goal_map == self.manager.current_map):
            dist = calc_distance([goal.target_pose.pose.position.x,
                                  goal.target_pose.pose.position.y], robot_pos)
            graph["start"]["end"] = dist
            graph["end"]["start"] = dist
        
        print(graph)
        # path = self.shortest_path(graph, "start", "end")[1:] #skip "start"
        path = ["0_elevator", "end"]

        offset = []
        old_north = 0.0

        old_pos = [None, None]
        old_angle = None

        while (path[0] != "end"):
            print(path[0])
            #wormhole
            name = path[0][path[0].find("_") + 1:]
            #print name
            wormhole = None
            for i in self.manager.wormholes:
                if (i["name"] == name):
                    wormhole = i
            #print wormhole

            location = wormhole["locations"][0] # change back if multiple elevators [int(path[0].split("_")[0])]
            pos = location["position"]
            mapname = location["map"]
            north = self.manager.map_north[mapname]
            wormhole_type = "normal"
            wormhole_goal = None
            if (len(path) > 1):
                if (path[0][path[0].find("_") + 1:] == path[1][path[0].find("_") + 1:]):
                    wormhole_type = wormhole["type"]
                    wormhole_goal = MultiMapNavigationTransitionGoal()
                    wormhole_goal.wormhole = yaml.dump(wormhole)
                    wormhole_goal.start = int(path[0].split("_")[0])
                    wormhole_goal.end = int(path[1].split("_")[0])
            
            angle = 0
            radius = None
            if "radius" in wormhole: 
                #This is in fact not required. Some wormholes have zero radius
                #in which case the robot must drive as close as possible to the
                #wormhole. Examples include doors and elevators.
                radius = wormhole["radius"]
            if "angle" in location:
                #This requires the robot to take a fixed angle position. This is 
                #used for things like doors and elevators. It won't work if a
                #radius is specified
                angle = location["angle"]
                if (radius != None):
                    rospy.logwarn("Angle ignored because radius specified")

            #We have switched maps in the wormhole
            if (mapname != self.manager.current_map):
                #Create and publish the new pose for AMCL
                msg = PoseWithCovarianceStamped()
                msg.header.frame_id = "map"
                msg.header.stamp = rospy.get_rostime()
                
                offset_angle = 0.0
                offset_radius = 0.0
                if (radius):
                    offset_angle = math.atan2(offset[1], offset[0])
                    offset_radius = math.sqrt(offset[0] * offset[0] + offset[1] * offset[1])

                    offset_angle += north - old_north
                
                msg.pose.pose.position.x = pos[0] + math.cos(offset_angle) * offset_radius
                msg.pose.pose.position.y = pos[1] + math.sin(offset_angle) * offset_radius
                msg.pose.pose.position.z = 0.0
                
                roll, pitch, yaw = tf.transformations.euler_from_quaternion( \
                    self.manager.get_robot_rotation())
                #print yaw
                yaw += north - old_north
                if (angle):
                    yaw = angle
                quat = tf.transformations.quaternion_from_euler(0, 0, yaw)
                msg.pose.pose.orientation.x = quat[0]
                msg.pose.pose.orientation.y = quat[1]
                msg.pose.pose.orientation.z = quat[2]
                msg.pose.pose.orientation.w = quat[3]

                msg.pose.covariance = [0.25, 0.0, 0.0, 0.0, 0.0, 0.0, 
                                       0.0, 0.25, 0.0, 0.0, 0.0, 0.0, 
                                       0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 
                                       0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 
                                       0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 
                                       0.0, 0.0, 0.0, 0.0, 0.0, 
                                       0.06853891945200942]

                #print msg
                self.pose_pub.publish(msg)
                #Select the new map
                self.manager.select_map(mapname)

                rospy.sleep(2) #FIXME: come up with an alternative approach to know when AMCL is done

                offset = self.manager.get_robot_position()
                offset[0] = offset[0] - pos[0]
                offset[1] = offset[1] - pos[1]

                rospy.loginfo("Wait for movebase")
                self.move_base.wait_for_server()
                rospy.loginfo("Done")

            elif (angle != old_angle or old_pos[0] != pos[0] or old_pos[1] != pos[1]):
                #We need to do driving to get to the next wormhole
                #print pos
                #Create the goal for the next waypoint (at the target)
                msg = MoveBaseGoal()
                msg.target_pose.header.stamp = rospy.get_rostime()
                msg.target_pose.header.frame_id = "map"
                msg.target_pose.pose.position.x = pos[0]
                msg.target_pose.pose.position.y = pos[1]
                msg.target_pose.pose.position.z = 0
                quat = tf.transformations.quaternion_from_euler(0, 0, angle)
                msg.target_pose.pose.orientation.x = quat[0]
                msg.target_pose.pose.orientation.y = quat[1]
                msg.target_pose.pose.orientation.z = quat[2]
                msg.target_pose.pose.orientation.w = quat[3]
                
                self.go_to_goal(msg, radius)

                rospy.loginfo("Done move_base")
                offset = self.manager.get_robot_position()
                offset[0] = offset[0] - pos[0]
                offset[1] = offset[1] - pos[1]
            else:
                rospy.loginfo("Skipped move base because the goal location is the current location")

            if (wormhole_type != "normal" and wormhole_goal != None):
                rospy.loginfo("Transition: " + str(wormhole_type))
                cli = self.manager.transition_action_clients[wormhole_type]
                #print wormhole_goal
                cli.send_goal(wormhole_goal)
                cli.wait_for_result()
            
            #print "done"
            old_pos = pos
            old_angle = angle
            old_north = north

            path = path[1:]
            print(path)
        

        #Get to the end point
        msg = MoveBaseGoal()
        msg.target_pose = goal.target_pose
        self.go_to_goal(msg, None)
        self.action_server.set_succeeded(MultiMapNavigationResult())

    def go_to_goal(self, msg, radius=None):
        print(msg)
        #print "Wait for move base"
        bad = True
        bad_count = 0
        while not rospy.is_shutdown() and bad:
            rospy.loginfo("Send move base goal radius: " + str(radius))
            self.move_base.send_goal(msg)
            if (radius != None):
                while (self.move_base.get_state() == GoalStatus.PENDING or \
                           self.move_base.get_state() == GoalStatus.ACTIVE) and \
                           not rospy.is_shutdown():
                    rospy.sleep(0.1)
                    if calc_distance((msg.target_pose.pose.position.x,
                                      msg.target_pose.pose.position.y),
                                     self.manager.get_robot_position()) < radius:
                        bad = False
                        break
                self.move_base.cancel_goal()
            self.move_base.wait_for_result()
            if (self.move_base.get_state() == GoalStatus.SUCCEEDED or bad == False):
                bad = False
            else:
                rospy.sleep(1.0)
            if bad:
                bad_count = bad_count + 1
                if (bad_count > 1):
                    bad_count = 0
                    rospy.logerr("Movebase is not responding. Try rotating to random positions")
                    bad = True
                    while not rospy.is_shutdown() and bad:
                        pos = self.manager.get_robot_position()
                        angle = random.uniform(-math.pi, math.pi)

                        spin = MoveBaseGoal()
                        spin.target_pose.header.stamp = rospy.get_rostime()
                        spin.target_pose.header.frame_id = "map"
                        spin.target_pose.pose.position.x = pos[0]
                        spin.target_pose.pose.position.y = pos[1]
                        spin.target_pose.pose.position.z = 0
                        quat = tf.transformations.quaternion_from_euler(0, 0, angle)
                        spin.target_pose.pose.orientation.x = quat[0]
                        spin.target_pose.pose.orientation.y = quat[1]
                        spin.target_pose.pose.orientation.z = quat[2]
                        spin.target_pose.pose.orientation.w = quat[3]
                        self.move_base.send_goal(spin)
                        self.move_base.wait_for_result()
                        if (self.move_base.get_state() == GoalStatus.SUCCEEDED):
                            bad = False
                    bad = True #Make sure we are still bad for actual motion

if (__name__ == "__main__"):
    rospy.init_node('multi_map_navigation')
    manager = MultiMapNavigationDataManager()
    navigator = MultiMapNavigationNavigator(manager)
    while not rospy.is_shutdown():
        manager.publish_markers()
        rospy.sleep(1.0)




