// Generated by gencpp from file multi_map_navigation/MultiMapNavigationTransitionGoal.msg
// DO NOT EDIT!


#ifndef MULTI_MAP_NAVIGATION_MESSAGE_MULTIMAPNAVIGATIONTRANSITIONGOAL_H
#define MULTI_MAP_NAVIGATION_MESSAGE_MULTIMAPNAVIGATIONTRANSITIONGOAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace multi_map_navigation
{
template <class ContainerAllocator>
struct MultiMapNavigationTransitionGoal_
{
  typedef MultiMapNavigationTransitionGoal_<ContainerAllocator> Type;

  MultiMapNavigationTransitionGoal_()
    : wormhole()
    , start(0)
    , end(0)  {
    }
  MultiMapNavigationTransitionGoal_(const ContainerAllocator& _alloc)
    : wormhole(_alloc)
    , start(0)
    , end(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _wormhole_type;
  _wormhole_type wormhole;

   typedef int32_t _start_type;
  _start_type start;

   typedef int32_t _end_type;
  _end_type end;





  typedef boost::shared_ptr< ::multi_map_navigation::MultiMapNavigationTransitionGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::multi_map_navigation::MultiMapNavigationTransitionGoal_<ContainerAllocator> const> ConstPtr;

}; // struct MultiMapNavigationTransitionGoal_

typedef ::multi_map_navigation::MultiMapNavigationTransitionGoal_<std::allocator<void> > MultiMapNavigationTransitionGoal;

typedef boost::shared_ptr< ::multi_map_navigation::MultiMapNavigationTransitionGoal > MultiMapNavigationTransitionGoalPtr;
typedef boost::shared_ptr< ::multi_map_navigation::MultiMapNavigationTransitionGoal const> MultiMapNavigationTransitionGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::multi_map_navigation::MultiMapNavigationTransitionGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::multi_map_navigation::MultiMapNavigationTransitionGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::multi_map_navigation::MultiMapNavigationTransitionGoal_<ContainerAllocator1> & lhs, const ::multi_map_navigation::MultiMapNavigationTransitionGoal_<ContainerAllocator2> & rhs)
{
  return lhs.wormhole == rhs.wormhole &&
    lhs.start == rhs.start &&
    lhs.end == rhs.end;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::multi_map_navigation::MultiMapNavigationTransitionGoal_<ContainerAllocator1> & lhs, const ::multi_map_navigation::MultiMapNavigationTransitionGoal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace multi_map_navigation

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::multi_map_navigation::MultiMapNavigationTransitionGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::multi_map_navigation::MultiMapNavigationTransitionGoal_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::multi_map_navigation::MultiMapNavigationTransitionGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::multi_map_navigation::MultiMapNavigationTransitionGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::multi_map_navigation::MultiMapNavigationTransitionGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::multi_map_navigation::MultiMapNavigationTransitionGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::multi_map_navigation::MultiMapNavigationTransitionGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5b23d9c1c602bed1aeb3537d1b61abd3";
  }

  static const char* value(const ::multi_map_navigation::MultiMapNavigationTransitionGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5b23d9c1c602bed1ULL;
  static const uint64_t static_value2 = 0xaeb3537d1b61abd3ULL;
};

template<class ContainerAllocator>
struct DataType< ::multi_map_navigation::MultiMapNavigationTransitionGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "multi_map_navigation/MultiMapNavigationTransitionGoal";
  }

  static const char* value(const ::multi_map_navigation::MultiMapNavigationTransitionGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::multi_map_navigation::MultiMapNavigationTransitionGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"string wormhole\n"
"int32 start\n"
"int32 end\n"
;
  }

  static const char* value(const ::multi_map_navigation::MultiMapNavigationTransitionGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::multi_map_navigation::MultiMapNavigationTransitionGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.wormhole);
      stream.next(m.start);
      stream.next(m.end);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MultiMapNavigationTransitionGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::multi_map_navigation::MultiMapNavigationTransitionGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::multi_map_navigation::MultiMapNavigationTransitionGoal_<ContainerAllocator>& v)
  {
    s << indent << "wormhole: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.wormhole);
    s << indent << "start: ";
    Printer<int32_t>::stream(s, indent + "  ", v.start);
    s << indent << "end: ";
    Printer<int32_t>::stream(s, indent + "  ", v.end);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MULTI_MAP_NAVIGATION_MESSAGE_MULTIMAPNAVIGATIONTRANSITIONGOAL_H
